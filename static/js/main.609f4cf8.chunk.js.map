{"version":3,"sources":["Actions/actions.js","Components/Message.js","Components/MessagesList.js","Components/Feed.js","Components/ComposeMessage.js","Components/UserMessages.js","Components/Profile.js","Components/Login.js","Components/DeleteUser.js","Components/EditProfile.js","Components/Register.js","Components/Logout.js","Components/NavBar.js","Components/App.js","serviceWorker.js","Reducers/reducer.js","index.js","logo.png"],"names":["GET_MESSAGES","GET_MESSAGES_SUCCESS","GET_MESSAGES_FAILURE","kwitterURL","updateMessageById","messageId","dispatch","getState","type","fetch","concat","then","res","json","data","message","getMessageById","messageIndex","messages","findIndex","id","index","toggleLike","likeId","find","userId","loggedInUser","like","likes","token","authentication","method","headers","Authorization","Content-Type","body","JSON","stringify","addLike","getMessages","statusText","payload","forEach","getAnyUser","catch","err","console","log","login","loginData","response","ok","success","result","push","getUserInfo","user","Message","react_default","a","createElement","react","Card","color","animation","Icon","Inverted","vertical","width","fluid","Content","Header","this","props","text","Description","username","Divider","extra","onClick","isLiked","numOfLikes","Component","MessagesList","_Component","_getPrototypeOf2","_this","Object","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","formatKweetDate","date","zeros","dateObject","Date","hours","getUTCMonth","getUTCDate","getUTCFullYear","getHours","minutes","getMinutes","seconds","getSeconds","inherits","createClass","key","value","_this2","Fragment","Grid","container","stackable","Row","Column","map","Components_Message","connect","state","users","objectSpread","Feed","style","textAlign","Components_MessagesList","ComposeMessage","handleMessageSubmit","event","setState","target","handleComposeMessageProfileEnter","composeMessage","handleComposeMessageProfileButton","displayFeed","Form","display","justifyContent","TextArea","placeholder","onChange","onKeyPress","maxLength","maxWidth","Button","padding","React","userID","Sidebar1","as","Menu","Image","src","logo","Segment","inverted","Meta","displayName","about","Link","to","size","floated","basic","Components_ComposeMessage","UserMessages","verticalAlign","Login","password","handleUsernameChange","handlePasswordChange","handleLogin","height","centered","stacked","Field","label","required","control","Input","autoFocus","Group","positive","Or","loginResult","DeleteUser","modalOpen","handleOpen","handleClose","handleDeleteUser","deleteUser","Modal","trigger","name","open","onClose","icon","Actions","EditProfile","handleChange","e","_ref","defineProperty","handleSubmit","_ref2","updateUser","Subheader","Components_DeleteUser","userData","Register","handleDisplayNameChange","handleRegister","register","registerResult","registerData","history","Logout","handleLogout","logout","active","position","Item","Dimmer","page","Navbar","activeItem","handleItemClick","Container","pointing","header","marginRight","exact","Components_Logout","App","Switch","Route","path","component","NavBar","Profile","Boolean","window","location","hostname","match","initialState","loginAuthSuccess","createdAt","updatedAt","kwitterReducer","undefined","action","newMessages","slice","splice","createBrowserHistory","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","connectRouter","applyMiddleware","routerMiddleware","thunk","ReactDOM","render","es","lib","src_Components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.609f4cf8.chunk.js","sourcesContent":["import { push } from \"connected-react-router\";\nexport const DELETE_USER = \"DELETE_USER\";\nexport const DELETE_USER_SUCCESS = \"DELETE_USER_SUCCESS\";\nexport const DELETE_USER_FAILURE = \"DELETE_USER_FAILURE\";\nexport const GET_USER = \"GET_USER\";\nexport const GET_USER_SUCCESS = \"GET_USER_SUCCESS\";\nexport const GET_USER_FAILURE = \"GET_USER_FAILURE\";\nexport const LOGOUT = \"LOGOUT\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const LOGOUT_FAILURE = \"LOGOUT_FAILURE\";\nexport const LOGIN = \"LOGIN\";\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const REGISTER = \"REGISTER\";\nexport const REGISTER_FAILURE = \"REGISTER_FAILURE\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const LIKE_MESSAGE = \"LIKE_MESSAGE\";\nexport const GET_MESSAGES = \"GET_MESSAGES\";\nexport const GET_MESSAGES_SUCCESS = \"GET_MESSAGES_SUCCESS\";\nexport const GET_MESSAGES_FAILURE = \"GET_MESSAGES_FAILURE\";\nexport const ADD_MESS = \"ADD_TEXT\";\nexport const UPDATE_USER = \"UPDATE_USER\";\nexport const UPDATE_USER_SUCCESS = \"UPDATE_USER_SUCCESS\";\nexport const UPDATE_USER_FAILURE = \"UPDATE_USER_FAILURE\";\nexport const REMOVE_LIKE = \"REMOVE_LIKE\";\nexport const REMOVE_LIKE_SUCCESS = \"REMOVE_LIKE_SUCCESS\";\nexport const ADD_LIKE = \"ADD_LIKE\";\nexport const ADD_LIKE_SUCCESS = \"ADD_LIKE_SUCCESS\";\nexport const UPDATE_MESSAGE_BY_ID_SUCCESS = \"UPDATE_MESSAGE_BY_ID_SUCCESS\";\nexport const UPDATE_MESSAGE_BY_ID_FAIL = \"UPDATE_MESSAGE_BY_ID_FAIL\";\nexport const GET_MESSAGE_BY_ID = \"GET_MESSAGE_BY_ID\";\nexport const GET_MESSAGE_BY_ID_SUCCESS = \"GET_MESSAGE_BY_ID_SUCCESS\";\nexport const CREATE_MESSAGE = \"CREATE_MESSAGE\";\nexport const CREATE_MESSAGE_SUCCESS = \"CREATE_MESSAGE_SUCCESS\";\nexport const GET_ANY_USER = \"GET_ANY_USER\";\nexport const GET_ANY_USER_SUCCESS = \"GET_ANY_USER_SUCCESS\";\nexport const GET_ANY_USER_FAILURE = \"GET_ANY_USER_FAILURE\";\nconst kwitterURL = \"https://kwitter-api.herokuapp.com\";\n\nexport const composeMessage = text => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  dispatch({ type: CREATE_MESSAGE });\n  return fetch(`${kwitterURL}/messages`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ text })\n  })\n    .then(res => res.json())\n    .then(data => {\n      dispatch({\n        type: CREATE_MESSAGE_SUCCESS\n      });\n      const userId = getState().authentication.id;\n      dispatch(getUserInfo(userId));\n    });\n};\n\nexport const removeLike = likeId => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  dispatch({ type: REMOVE_LIKE });\n  return fetch(`${kwitterURL}/likes/${likeId}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: \"Bearer \" + token\n    }\n  })\n    .then(res => res.json())\n    .then(data => {\n      dispatch({\n        type: REMOVE_LIKE_SUCCESS\n      });\n    });\n};\n\nexport const addLike = messageId => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  dispatch({ type: ADD_LIKE });\n  return fetch(`${kwitterURL}/likes`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token\n    },\n    body: JSON.stringify({ messageId })\n  })\n    .then(res => res.json())\n    .then(data => {\n      dispatch({ type: ADD_LIKE_SUCCESS });\n    });\n};\nexport const getMessageById = messageId => dispatch => {\n  dispatch({ type: GET_MESSAGE_BY_ID });\n  return fetch(`${kwitterURL}/messages/${messageId}`)\n    .then(res => res.json())\n    .then(data => {\n      dispatch({ type: GET_MESSAGE_BY_ID_SUCCESS });\n      return data.message;\n    });\n};\nexport const updateMessageById = messageId => (dispatch, getState) => {\n  dispatch(getMessageById(messageId)).then(message => {\n    const messages = getState().messages;\n    const messageIndex = messages.findIndex(\n      message => message.id === messageId\n    );\n    if (~messageIndex) {\n      dispatch({\n        type: UPDATE_MESSAGE_BY_ID_SUCCESS,\n        id: messageId,\n        index: messageIndex,\n        message\n      });\n    } else {\n      dispatch({ type: UPDATE_MESSAGE_BY_ID_FAIL, id: messageId });\n    }\n  });\n};\n\nexport const toggleLike = messageId => (dispatch, getState) => {\n  const message = getState().messages.find(message => message.id === messageId);\n  const userId = getState().loggedInUser.id;\n\n  const like = message.likes.find(like => like.userId === userId);\n\n  if (like) {\n    dispatch(removeLike(like.id)).then(() => {\n      dispatch(updateMessageById(messageId));\n    });\n  } else {\n    dispatch(addLike(messageId)).then(() => {\n      dispatch(updateMessageById(messageId));\n    });\n  }\n};\nexport const likedMessageSuccess = likeObj => {\n  return {\n    type: LIKE_MESSAGE,\n    payload: likeObj\n  };\n};\n\nexport const likeMessage = (userId, messageId, token) => dispatch => {\n  const header = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer ${token}\"\n    },\n    body: JSON.stringify({\n      userId: userId,\n      messageId: messageId\n    })\n  };\n  return fetch(\"${kwitterURL}/messages\", header)\n    .then(response => response.json())\n    .then(likeObj => {\n      dispatch(likedMessageSuccess(likeObj));\n      return likeObj.like.id;\n    });\n};\n\n// export const addMess = ({ message, token }) => dispatch => {\n//   fetch(`${kwitterURL}/messages`, {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       charset: \"utf-8\"\n//     },\n//     data: { text: message }\n//   })\n//     .then(() => {\n//       dispatch(getMessages());\n//     })\n//     .catch(err => console.log(err));\n// };\n\nexport function getMessages() {\n  return function(dispatch) {\n    dispatch({ type: GET_MESSAGES });\n    fetch(`${kwitterURL}/messages`)\n      .then(res => {\n        if (res.statusText === \"OK\") {\n          return res.json(); // htis is  async; it runs once everyhitng is out of  queue\n        }\n      })\n      .then(data => {\n        dispatch({\n          type: GET_MESSAGES_SUCCESS,\n          payload: {\n            messages: data.messages\n          }\n        });\n        data.messages.forEach(message => dispatch(getAnyUser(message.userId)))\n      })\n      .catch(err => {\n        console.log(err);\n        dispatch({ type: GET_MESSAGES_FAILURE });\n      });\n  };\n}\n\nexport const login = loginData => dispatch => {\n  dispatch({ type: LOGIN });\n  fetch(`${kwitterURL}/auth/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(loginData)\n  })\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      // right now, we dont have an api thing to catch this stuff, so doing this will send it to the catch\n      if (data.success === false) {\n        throw \"\";\n      }\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: {\n          token: data.token,\n          id: data.id\n        },\n        login: data,\n        result: \"Successful login!\"\n      });\n      dispatch(push(\"/profile\"));\n      dispatch(getUserInfo(data.id));\n    })\n    .catch(err => {\n      dispatch({\n        type: LOGIN_FAILURE,\n        result:\n          \"Failed to login. Please enter a valid username and/or password.\"\n      });\n    });\n};\n\nexport const getUserInfo = userId => dispatch => {\n  dispatch({ type: GET_USER });\n  fetch(`${kwitterURL}/users/${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: GET_USER_SUCCESS, data: data.user });\n    })\n    .catch(err => {\n      dispatch({ type: GET_USER_FAILURE, err });\n    });\n};\nexport const getAnyUser = userId => dispatch => {\n  dispatch({ type: GET_ANY_USER });\n  fetch(`${kwitterURL}/users/${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: GET_ANY_USER_SUCCESS, data: data.user });\n    })\n    .catch(err => {\n      dispatch({ type: GET_ANY_USER_FAILURE, err });\n    });\n};\n\nexport const logout = () => dispatch => {\n  fetch(`${kwitterURL}/auth/logout`)\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: LOGOUT_SUCCESS });\n      dispatch(push(\"/\"));\n      // alert(\"Thanks for visiting KWITTER! Come back soon!\");\n    })\n    .catch(err => {\n      dispatch({ type: LOGOUT_FAILURE, err });\n    });\n};\n\n// without default need samename in register\n// redux thunk = middleware (like express stuff where mw got reqs to go through it. here, each action goes through there(diaspatching thigng called register from reg.js and returns function (once return = inner function; redux sees it wants action obj, so inject dispatch in))); function inside function; when have action creator, it will inject dispatch for you and get registation data\n// sees value is action obj, not function, so pass dispatch value; could also just do the simple ones (returns action obj when returns obj likr the type:...), even with thunk but that isnt async\nexport const register = (registerData, history) => dispatch => {\n  // dispatch b4 fetch b/c have comp that wants to render loading spinner or something about waitingo n api req\n  dispatch({\n    type: REGISTER\n  });\n  // set method to post b/c not defautl get\n  // if cant communicate, it will throw; else it wont know when to throw or not; fetch doesnt know\n  fetch(`${kwitterURL}/auth/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(\n      // cant just send reg js stuff; need to json it\n      // typed as how api expects them\n      // make sure pass these values\n      // username,\n      // displayName,\n      // password\n      registerData\n    )\n  })\n    // hydrates body; always need for api b/c always returns json; if not, it would  be parsed diff\n    // .then(response => response.json()) // if immediately hydrate, it always assumes its correct, so ave to check\n    .then(response => {\n      // response.ok means it's in the 200 range;\n      if (!response.ok) {\n        // throw from here, it goes to catch\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json(); // this is an else basically\n    })\n    .then(data => {\n      // data looks like w/e we got for resposne in api/psotman\n      // success already has values in state\n      // no setstate cause not in comp\n      // do dispatch on success\n      dispatch({\n        type: REGISTER_SUCCESS,\n        // add on extra data,  which is reuslt back from api (which is the username and displayname that you get back)\n        register: data,\n        result: \"Successfully Registered!\" // could make a <div>{this.props.result}</div> to display; reducer might use this value to put some  update\n      });\n      dispatch(push(\"/profile\"));\n      dispatch(\n        login({\n          username: registerData.username,\n          password: registerData.password\n        })\n      ); //gets loginData w. un and p, so need it as an obj; haveing only the username and password is because thats what the rD needs\n    })\n    .catch(err => {\n      // dispatch here on fail\n      dispatch({\n        type: REGISTER_FAILURE,\n        result: `Failed to register. Please enter a unique username, and make sure all fields have 3-20 characters.`\n      });\n    });\n};\n\nexport const deleteUser = token => dispatch => {\n  dispatch({ type: DELETE_USER });\n  fetch(`${kwitterURL}/users`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  })\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      console.log(data);\n      dispatch({ type: DELETE_USER_SUCCESS });\n      dispatch(push(\"/register\"));\n      //   window.confirm(\"Are you sure?\");\n    })\n    .catch(err => {\n      dispatch({ type: DELETE_USER_FAILURE, err });\n    });\n};\nexport const updateUser = userData => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  if (userData.displayName === \"\") {\n    delete userData.displayName;\n  }\n  if (userData.password === \"\") {\n    delete userData.password;\n  }\n  dispatch({ type: UPDATE_USER });\n  fetch(\"https://kwitter-api.herokuapp.com/users\", {\n    method: \"PATCH\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(userData)\n  })\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: UPDATE_USER_SUCCESS, data: data.user });\n      dispatch(push(\"/profile\"));\n    })\n    .catch(err => {\n      dispatch({ type: UPDATE_USER_FAILURE, err });\n    });\n};\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { Divider, Card, Grid, GridColumn } from \"semantic-ui-react\";\n\nclass Message extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Card\n          color=\"green\"\n          animation=\"overlay\"\n          Icon=\"labeled\"\n          Inverted\n          vertical\n          width=\"thin\"\n          fluid\n        >\n          <Card.Content>\n            <Card.Header>{this.props.text}</Card.Header>\n            {/* //   place props in styling, from fragment section. */}\n            <Card.Description>\n              Kweeted by {this.props.username}\n            </Card.Description>\n            <Divider />\n            <Card.Content extra>\n              <button onClick={this.props.toggleLike}>\n                {this.props.isLiked ? \"Unlike\" : \"Like\"}\n              </button>\n              <p>Likes: {this.props.numOfLikes}</p>\n            </Card.Content>\n          </Card.Content>\n        </Card>\n      </Fragment>\n    );\n  }\n}\nexport default Message;\n","import React, { Component, Fragment } from \"react\";\nimport { getMessages, toggleLike } from \"../Actions/actions\";\nimport { connect } from \"react-redux\";\nimport Message from \"./Message\";\nimport {\n  Container,\n  Button,\n  Card,\n  Divider,\n  Grid,\n  Header,\n  Image,\n  Menu,\n  Segment\n} from \"semantic-ui-react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nexport class MessagesList extends Component {\n  componentDidMount() {\n    this.props.getMessages();\n  }\n\n  formatKweetDate = date => {\n    const months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sept\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\"\n    ];\n    const zeros = [\"00\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\"];\n\n    let dateObject = new Date(date);\n    let month = dateObject.getUTCMonth();\n    let day = dateObject.getUTCDate();\n    let year = dateObject.getUTCFullYear();\n    let hours = dateObject.getHours();\n\n    let ending = \"AM\";\n    if (hours === 0) {\n      hours = 12;\n    } else if (hours < 10) {\n      hours = zeros[hours];\n    } else if (hours === 12) {\n      ending = \"PM\";\n    } else if (hours > 12) {\n      hours = hours - 12;\n      ending = \"PM\";\n    }\n    let minutes = dateObject.getMinutes();\n    if (minutes < 10) {\n      minutes = zeros[minutes];\n    }\n    let seconds = dateObject.getSeconds();\n    if (seconds < 10) {\n      seconds = zeros[seconds];\n    }\n    return \"${months[month]} ${day}, ${year} at ${hours}:${minutes}:${seconds} ${ending}\";\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Grid container stackable>\n          <Grid.Row>\n            <Grid.Column>\n              {this.props.messages.map(message => (\n                <Message\n                  key={message.id}\n                  text={message.text}\n                  username={message.username}\n                  toggleLike={() => this.props.toggleLike(message.id)}\n                  numOfLikes={message.likes.length}\n                  isLiked={message.isLiked}\n                />\n              ))}\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    messages: state.messages.map(message => {\n      const username = state.users[message.userId].username || \"unknown\";\n      const like = message.likes.find(\n        like => like.userId === state.authentication.id\n      );\n      if (like) {\n        return {\n          ...message,\n          username,\n          isLiked: true\n        };\n      } else {\n        return {\n          ...message,\n          username,\n          isLiked: false\n        };\n      }\n    })\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getMessages: () => {\n      dispatch(getMessages());\n    },\n    toggleLike: messageId => dispatch(toggleLike(messageId))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MessagesList);\n\n// possible logic to add from jsx file, this would allow us to filter users and return their messages.\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     findUsers: (limit, offset) => {\n//       dispatch(findUsers(limit, offset));\n//     },\n//     findSingleUser: userID => {\n//       dispatch(findSingleUser(userID));\n//     },\n//     getMessages: () => {\n//       dispatch(getMessages());\n//     }\n//   };\n// };\n","import React, { Component } from \"react\";\nimport MessagesList from \"./MessagesList\";\n\nclass Feed extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <h1 style={{textAlign:\"center\"}}>Feed</h1>\n        <MessagesList />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Feed;\n","import React, { Fragment } from \"react\";\nimport { Form, TextArea, Button } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { composeMessage } from \"../Actions/actions\";\n\nclass ComposeMessage extends React.Component {\n  state = {\n    text: \"\"\n  };\n\n  handleMessageSubmit = event => {\n    this.setState({ text: event.target.value });\n  };\n\n  handleComposeMessageProfileEnter = event => {\n    if (event.key === \"Enter\") {\n      this.props.composeMessage(this.state.text);\n      this.setState({ text: \"\" });\n    }\n  };\n\n  handleComposeMessageProfileButton = event => {\n    this.props.composeMessage(this.state.text);\n    this.setState({ text: \"\" });\n  };\n\n  displayFeed = () => {\n    return (\n      <Form\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\"\n        }}\n      >\n        <TextArea\n          placeholder=\"What would you like to Kweet about today?\"\n          onChange={this.handleMessageSubmit}\n          value={this.state.text}\n          onKeyPress={this.handleComposeMessageProfileEnter}\n          maxLength=\"255\"\n          style={{ maxWidth: \"36em\" }}\n        />\n        <Button\n          style={{\n            color: \"rgb(45,45,45)\",\n            padding: \"5px\"\n          }}\n          onClick={this.handleComposeMessageProfileButton}\n        >\n          Kweet\n        </Button>\n      </Form>\n    );\n  };\n\n  render() {\n    return <Fragment>{this.displayFeed()}</Fragment>;\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userID: state.userID\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    composeMessage: text => {\n      dispatch(composeMessage(text));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ComposeMessage);\n","import { MessagesList } from \"./MessagesList\";\nimport { getMessages, toggleLike } from \"../Actions/actions\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = state => {\n  return {\n    messages: state.loggedInUser.messages.map(message => {\n      const username = state.loggedInUser.username;\n      const like = message.likes.find(\n        like => like.userId === state.authentication.id\n      );\n      if (like) {\n        return {\n          ...message,\n          username,\n          isLiked: true\n        };\n      } else {\n        return {\n          ...message,\n          username,\n          isLiked: false\n        };\n      }\n    })\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getMessages: () => {\n      dispatch(getMessages());\n    },\n    toggleLike: messageId => dispatch(toggleLike(messageId))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MessagesList);\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Card,\n  Divider,\n  Grid,\n  Header,\n  Image,\n  Menu,\n  Segment\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport logo from \"../logo.png\";\nimport { connect } from \"react-redux\";\nimport ComposeMessage from \"./ComposeMessage\";\nimport UserMessages from \"./UserMessages\";\nimport { react } from \"babel-types\";\n\nclass Sidebar1 extends Component {\n  render() {\n    return (\n      <Grid container stackable>\n        <Grid.Row>\n          <Grid.Column width={6}>\n            <Card\n              color=\"green\"\n              as={Menu}\n              animation=\"overlay\"\n              Icon=\"labeled\"\n              Inverted\n              vertical\n              width=\"thin\"\n              fluid\n            >\n              <Card.Content>\n                <Image src={logo} />\n                <Segment style={{ padding: \"1em 0em\" }} inverted color=\"green\">\n                  <Card.Header as=\"h2\" textAlign=\"center\">\n                    {this.props.username}\n                  </Card.Header>\n                </Segment>\n                <Card.Description>\n                  <Card.Meta as=\"h2\">Display Name:</Card.Meta>\n                  {this.props.displayName}\n                </Card.Description>\n                <Divider />\n                <Card.Description>\n                  <Card.Meta as=\"h2\">About Me:</Card.Meta>\n                  {this.props.about}\n                </Card.Description>\n              </Card.Content>\n              <Card.Content extra>\n                <Link to=\"/editprofile\">\n                  <Button size=\"large\" color=\"black\" fluid>\n                    Edit Profile\n                  </Button>\n                </Link>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n          <Grid.Column floated=\"right\" width={10}>\n            <Segment basic>\n              <Header as=\"h1\" textAlign=\"center\">My Messages</Header>\n              <ComposeMessage />\n              <UserMessages />\n            </Segment>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n\nconst profilePicture = () => (\n  <div>\n    <Image size=\"tiny\" verticalAlign=\"top\" /> <span>Top Aligned</span>\n    <Divider />\n  </div>\n);\n\nconst mapStateToProps = state => {\n  return {\n    displayName: state.loggedInUser.displayName,\n    about: state.loggedInUser.about,\n    username: state.loggedInUser.username\n  };\n};\nexport default connect(\n  mapStateToProps,\n  profilePicture\n)(Sidebar1);\n","import React, { Component } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../Actions/actions.js\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Image,\n  Input,\n  Segment\n} from \"semantic-ui-react\";\nimport logo from \"../logo.png\";\n\nclass Login extends Component {\n  state = {\n    username: \"\",\n    password: \"\"\n  };\n\n  handleUsernameChange = event => {\n    this.setState({\n      username: event.target.value\n    });\n  };\n  handlePasswordChange = event => {\n    this.setState({\n      password: event.target.value\n    });\n  };\n  handleLogin = event => {\n    this.props.login({\n      username: this.state.username,\n      password: this.state.password\n    });\n  };\n\n  render() {\n    return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: \"100%\" }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <div />\n          <Header as=\"h1\" color=\"black\" textAlign=\"center\">\n            Welcome to Kwitter!\n          </Header>\n          <Image src={logo} size=\"medium\" centered />\n          <Header as=\"h2\" color=\"grey\" textAlign=\"center\">\n            Login\n          </Header>\n          <Form size=\"large\">\n            <Segment stacked color=\"grey\">\n              <Form.Field\n                label=\"Username:\"\n                required\n                placeholder=\"Username\"\n                type=\"text\"\n                control={Input}\n                autoFocus\n                onChange={this.handleUsernameChange}\n              />\n              <Form.Field\n                label=\"Password:\"\n                required\n                placeholder=\"Password\"\n                type=\"password\"\n                control={Input}\n                onChange={this.handlePasswordChange}\n              />\n              <Button.Group>\n                {/* redirect */}\n                {/* connected react router */}\n                <Button\n                  onClick={this.handleLogin}\n                  positive\n                  size=\"large\"\n                  to=\"/profile\"\n                >\n                  Login to Your Account!\n                </Button>\n                <Button.Or />\n                <Link to=\"/register\">\n                  <Button size=\"large\" color=\"brown\">\n                    Don't Have an Account? Register Here!\n                  </Button>\n                </Link>\n              </Button.Group>\n              <div>{this.props.result}</div>\n            </Segment>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    result: state.loginResult\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    login: loginData => dispatch(login(loginData))\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Login);\n\n// 1.) User is able to enter username/password and access their account --> input boxes\n// 2.) URL should be on \"/\"\n// 3.) logging in takes you to the profile page --> need login button linked to profile\n","// this will get referenced in the edit profile\nimport React, { Component } from \"react\";\nimport { deleteUser } from \"../Actions/actions\";\nimport { connect } from \"react-redux\";\nimport { Button, Header, Icon, Modal, Divider } from \"semantic-ui-react\";\n// import DeleteUser from \"./DeleteUser\"\n// <DeleteUser/>\n\nclass DeleteUser extends Component {\n  state = { modalOpen: false };\n\n  handleOpen = () => this.setState({ modalOpen: true });\n  handleClose = () => this.setState({ modalOpen: false });\n  handleDeleteUser = event => {\n    this.props.deleteUser(this.props.token);\n    this.setState({ modalOpen: false });\n  };\n\n  render() {\n    return (\n      <Modal\n        trigger={\n          <Button onClick={this.handleOpen} color=\"red\">\n            <Icon name=\"trash alternate outline\" />\n            Delete User\n          </Button>\n        }\n        open={this.state.modalOpen}\n        onClose={this.handleClose}\n        size=\"tiny\"\n      >\n        <Header\n          textAlign=\"center\"\n          verticalAlign=\"middle\"\n          icon=\"trash alternate outline\"\n          as=\"h1\"\n        >\n          Do you want to delete your account?\n          <Divider />\n          <Modal.Actions>\n            <Button.Group>\n              <Button color=\"green\" onClick={this.handleDeleteUser}>\n                <Icon name=\"checkmark\" /> Indeed!\n              </Button>\n              <Button.Or />\n              <Button color=\"red\" onClick={this.handleClose}>\n                <Icon name=\"remove\" /> Nope!\n              </Button>\n            </Button.Group>\n          </Modal.Actions>\n        </Header>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.authentication.token\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteUser: token => dispatch(deleteUser(token))\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DeleteUser);\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  Input,\n  Segment\n} from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { updateUser } from \"../Actions/actions.js\";\nimport DeleteUser from \"./DeleteUser\";\n\nclass EditProfile extends Component {\n  state = { displayName: \"\", password: \"\", about: \"\" };\n\n  handleChange = (e, { value }) => this.setState({ [e.target.name]: value });\n  handleSubmit = (e, { value }) => {\n    this.props.updateUser({ ...this.state });\n  };\n\n  render() {\n    return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: \"100%\" }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 600 }}>\n          <Header as=\"h2\" color=\"brown\" icon>\n            <Icon name=\"settings\" />\n            Edit your profile!\n            <Header.Subheader>\n              Change your display name and password, and update all the\n              wonderful facts about you!\n            </Header.Subheader>\n          </Header>\n          <Form size=\"large\">\n            <Segment stacked color=\"grey\">\n              <Form.Input\n                onChange={this.handleChange}\n                name=\"displayName\"\n                fluid\n                label=\"Display Name\"\n                placeholder=\"Display Name\"\n              />\n              <Form.Input\n                onChange={this.handleChange}\n                name=\"password\"\n                fluid\n                label=\"Password\"\n                placeholder=\"Password\"\n              />\n              <Form.TextArea\n                onChange={this.handleChange}\n                name=\"about\"\n                label=\"About\"\n                placeholder=\"Tell us more about you...\"\n              />\n\n              <Form.Button color=\"green\" onClick={this.handleSubmit}>\n                <Icon name=\"checkmark\" /> Confirm Changes\n              </Form.Button>\n              <DeleteUser />\n            </Segment>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateUser: userData => dispatch(updateUser(userData))\n  };\n};\nconst mapStateToProps = state => {\n  return {\n    token: state.authentication.token\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(EditProfile);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { register } from \"../Actions/actions.js\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Image,\n  Input,\n  Segment\n} from \"semantic-ui-react\";\nimport logo from \"../logo.png\";\n\nclass Register extends Component {\n  state = {\n    username: \"\",\n    displayName: \"\",\n    password: \"\"\n    // result: \"\" // say if failed or success; dont need b/c inside action\n  };\n\n  // function will go on dom, so need to bind correctly\n  handleUsernameChange = event => {\n    this.setState({\n      username: event.target.value\n    });\n  };\n  handleDisplayNameChange = event => {\n    this.setState({\n      displayName: event.target.value\n    });\n  };\n  handlePasswordChange = event => {\n    this.setState({\n      password: event.target.value\n    });\n  };\n  // if has same username, api will send an error; get list of all usernames and check forrepeats and do onBlur (when exiting that inout box; might need another endpoint to send username)\n  // need to think about success and error cases\n  // the fetch will have to be in redux when get there\n  // register would be connected through action creator b/c the event isnt being used in handler, so this code doesnt have to be connected inside this comp and can move in avtion creator\n  handleRegister = event => {\n    // translate state value to get this then put elsewhere\n    this.props.register({\n      username: this.state.username,\n      displayName: this.state.displayName,\n      password: this.state.password\n    });\n  };\n\n  render() {\n    return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: \"100%\" }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <div />\n          <Header as=\"h1\" color=\"black\" textAlign=\"center\">\n            Welcome to Kwitter!\n          </Header>\n          <Image src={logo} size=\"small\" centered />\n          <Header as=\"h2\" color=\"grey\" textAlign=\"center\">\n            Register a New Account\n          </Header>\n          <Form size=\"large\">\n            <Segment stacked color=\"grey\">\n              <Form.Field label=\"ALL FIELDS MUST HAVE 3-20 CHARACTERS\" />\n              {/* make sure to add the onchanges otherwise value wont work; record value whenever changes nad display vlaue when rerenders */}\n              {/* required means it has to have something in it */}\n              {/* value is making things customized/changing thinhs in state; without, dom controls how value is displayed */}\n              <Form.Field\n                label=\"Username:\"\n                required\n                placeholder=\"Username\"\n                type=\"text\"\n                control={Input}\n                autoFocus\n                onChange={this.handleUsernameChange}\n              />\n              <Form.Field\n                label=\"Display Name:\"\n                required\n                placeholder=\"Display Name\"\n                type=\"text\"\n                control={Input}\n                onChange={this.handleDisplayNameChange}\n              />\n              <Form.Field\n                label=\"Password:\"\n                required\n                placeholder=\"Password\"\n                type=\"password\"\n                control={Input}\n                onChange={this.handlePasswordChange}\n              />\n              <Button.Group>\n                <Button positive size=\"large\" onClick={this.handleRegister}>\n                  Create Your New Account!\n                </Button>\n                <Button.Or />\n                <Link to=\"/\">\n                  <Button size=\"large\" color=\"brown\">\n                    Already Have an Account? Login Here!\n                  </Button>\n                </Link>\n              </Button.Group>\n              <div>{this.props.result}</div>\n            </Segment>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\n// listne to state value to rerender whne changes\nconst mapStateToProps = state => {\n  return {\n    result: state.registerResult\n  };\n};\n// thing get in is dispatch and reutnr props\nconst mapDispatchToProps = dispatch => {\n  return {\n    // neesd all state stuff to create action thing\n    // register: (username, displayName, password) => dispatch(register(username, displayName, password))\n    register: registerData => dispatch(register(registerData))\n  };\n};\n// export default Register;\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Register);\n\n// confirm password by being exactly the same?\n","import React, { Component } from \"react\";\nimport { Button, Dimmer, Header, Icon, Menu, Divider } from \"semantic-ui-react\";\nimport { logout } from \"../Actions/actions\";\nimport { connect } from \"react-redux\";\n\nclass Logout extends Component {\n  state = {};\n\n  handleLogout = event => {\n    this.props.logout();\n    this.setState({ active: false });\n  };\n\n  handleOpen = () => this.setState({ active: true });\n\n  render() {\n    const { active } = this.state;\n    return (\n      <Menu.Menu position=\"right\">\n        <Menu.Item name=\"logout\" onClick={this.handleOpen} />\n        <Dimmer active={active} page>\n          <Header as=\"h2\" icon inverted>\n            <Icon name=\"heart\" />\n            <Menu.Item>Thanks for visiting KWITTER! Come back soon!</Menu.Item>\n            <Divider />\n            <Button\n              name=\"logout\"\n              onClick={this.handleLogout}\n              size=\"massive\"\n              color=\"yellow\"\n            >\n              GOODBYE!!!\n            </Button>\n          </Header>\n        </Dimmer>\n      </Menu.Menu>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    logout: () => dispatch(logout())\n  };\n};\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Logout);\n","import React, { Component } from \"react\";\nimport Logout from \"./Logout\";\nimport { Image, Menu, Container } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport logo from \"../logo.png\";\n\nexport default class Navbar extends Component {\n  state = { activeItem: \"profile\" };\n\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name });\n\n  render() {\n    const { activeItem } = this.state;\n\n    return (\n      <Container>\n        <Menu pointing color=\"green\" inverted>\n          <Menu.Item header inverted>\n            <Image size=\"mini\" src={logo} style={{ marginRight: \"1.5em\" }} />\n            Kwitter\n          </Menu.Item>\n          <Menu.Item\n            as={Link}\n            name=\"feed\"\n            active={activeItem === \"feed\"}\n            onClick={this.handleItemClick}\n            exact\n            to=\"/feed\"\n          />\n          <Menu.Item\n            name=\"profile\"\n            as={Link}\n            active={activeItem === \"profile\"}\n            onClick={this.handleItemClick}\n            exact\n            to=\"/profile\"\n          />\n          {/* <DeleteUser /> */}\n          <Menu.Menu position=\"right\">\n            <Logout />\n          </Menu.Menu>\n        </Menu>\n        <div />\n      </Container>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Feed from \"./Feed\";\nimport Profile from \"./Profile\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport EditProfile from \"./EditProfile\";\nimport Register from \"./Register\";\nimport Message from \"./Message\";\nimport MessagesList from \"./MessagesList\";\nimport NavBar from \"./NavBar\";\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Switch>\n          {/* this is saying that on these paths, no compoennt/no navbar; the * means evrything else shwos navbar */}\n          <Route exact path=\"/editprofile\" component={NavBar} />\n          <Route exact path=\"/feed\" component={NavBar} />\n          <Route exact path=\"/profile\" component={NavBar} />\n          <Route exact path=\"/\" component={null} />\n          <Route exact path=\"/register\" component={null} />\n          <Route exact path=\"*\" component={null} />\n        </Switch>\n        {/* <MessagesList /> */}\n        <Switch>\n          <Route exact path=\"/feed\" component={Feed} />\n          <Route exact path=\"/profile\" component={Profile} />\n          <Route exact path=\"/register\" component={Register} />\n          <Route exact path=\"/editprofile\" component={EditProfile} />\n          <Route exact path=\"/\" component={Login} />\n          {/* <Route exact path=\"*\" component={NullPath} /> */}\n        </Switch>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  DELETE_USER,\n  DELETE_USER_FAILURE,\n  DELETE_USER_SUCCESS,\n  GET_USER,\n  GET_USER_FAILURE,\n  GET_USER_SUCCESS,\n  GET_MESSAGES,\n  GET_MESSAGES_FAILURE,\n  GET_MESSAGES_SUCCESS,\n  LOGIN,\n  LOGIN_FAILURE,\n  LOGIN_SUCCESS,\n  LOGOUT,\n  LOGOUT_FAILURE,\n  LOGOUT_SUCCESS,\n  REGISTER,\n  REGISTER_FAILURE,\n  REGISTER_SUCCESS,\n  UPDATE_USER,\n  UPDATE_USER_SUCCESS,\n  UPDATE_USER_FAILURE,\n  UPDATE_MESSAGE_BY_ID_SUCCESS,\n  GET_ANY_USER,\n  GET_ANY_USER_SUCCESS,\n  GET_ANY_USER_FAILURE\n} from \"../Actions/actions\";\n\nconst initialState = {\n  authentication: {\n    loginAuthSuccess: false,\n    token: null,\n    id: \"\"\n  },\n  loggedInUser: {\n    id: 0,\n    username: \"\",\n    displayName: \"\",\n    about: \"\",\n    createdAt: \"\",\n    updatedAt: \"\",\n    messages: []\n  },\n  // logoutUser: {\n  //   succes:\n  // }\n  login: {},\n  loginResult: \"\",\n  messages: [],\n  // if succes, it only reutnr usernme and dispalyname; result gets dumped into redux\n  register: {},\n  registerResult: \"\", // result is string, so default that\n  userId: null,\n  users: {}\n};\n\nconst kwitterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_MESSAGE_BY_ID_SUCCESS:\n      const newMessages = state.messages.slice();\n      newMessages.splice(action.index, 1, action.message);\n      return {\n        ...state,\n        messages: newMessages\n      };\n    case DELETE_USER:\n      return state;\n    case DELETE_USER_FAILURE:\n      return state;\n    case DELETE_USER_SUCCESS:\n      // do a slice and filter of based on the id or something based on all users?\n      return {\n        ...state,\n        initialState\n      };\n    case LOGIN:\n      return state;\n    case LOGIN_FAILURE:\n      return {\n        ...state,\n        authentication: {\n          loginAuthSuccess: false\n        },\n        loginResult: action.result\n      };\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        authentication: {\n          loginAuthSuccess: true,\n          token: action.payload.token,\n          id: action.payload.id\n        },\n        login: action.login,\n        loginResult: action.result\n      };\n    case REGISTER:\n      return state; // if not modifying anything, you can just do something like default to return all stuff; can do to get reducer started and can see all  tings being fired in the redux addont hing\n    case REGISTER_FAILURE:\n      return {\n        // state // placeholder for now; if want to do like\n        ...state,\n        registerResult: action.result\n      };\n    case REGISTER_SUCCESS:\n      return {\n        ...state,\n        register: action.register,\n        registerResult: action.result\n      };\n    case GET_USER:\n      return state;\n    case GET_USER_SUCCESS:\n      return {\n        ...state,\n        loggedInUser: action.data\n      };\n    case GET_USER_FAILURE:\n      return state;\n    case GET_ANY_USER:\n      return state;\n    case GET_ANY_USER_SUCCESS:\n      return {\n        ...state,\n        users: { ...state.users, [action.data.id]: action.data } \n      };\n    case GET_ANY_USER_FAILURE:\n      return state;\n    case GET_MESSAGES:\n      return state;\n    case GET_MESSAGES_FAILURE:\n      return state;\n    case GET_MESSAGES_SUCCESS:\n      return {\n        ...state,\n        messages: action.payload.messages\n      };\n    case LOGOUT:\n      return state;\n    case LOGOUT_SUCCESS:\n      return {\n        ...state,\n        loggedInUser: initialState.loggedInUser,\n        authentication: initialState.authentication\n      };\n    case LOGOUT_FAILURE:\n      return state;\n    // always need to return somehtign; could combine all of the cases with just the return state, but it doesnt waste that much time to not have it\n    case UPDATE_USER:\n      return state;\n    case UPDATE_USER_SUCCESS:\n      return {\n        ...state,\n        loggedInUser: { ...state.loggedInUser, ...action.data }\n      };\n    case UPDATE_USER_FAILURE:\n      return state;\n    // always need to return somehtign\n    default:\n      return state;\n  }\n};\n\nexport default kwitterReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ConnectedRouter,\n  routerMiddleware,\n  connectRouter\n} from \"connected-react-router\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// redux thunk is middleware but need to specify on redux\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\nimport kwitterReducer from \"./Reducers/reducer\";\nimport { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  connectRouter(history)(kwitterReducer),\n  composeEnhancers(applyMiddleware(routerMiddleware(history), thunk))\n);\n\nconst Index = () => (\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>\n);\n\nReactDOM.render(<Index />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.6d51e776.png\";"],"sourceRoot":""}