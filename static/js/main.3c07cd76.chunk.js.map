{"version":3,"sources":["Actions/actions.js","Components/Message.js","Components/MessagesList.js","Components/Feed.js","Components/ComposeMessage.js","Components/UserMessages.js","Components/Profile.js","Components/Login.js","Components/DeleteUser.js","Components/EditProfile.js","Components/Register.js","Components/Logout.js","Components/NavBar.js","Components/App.js","serviceWorker.js","Reducers/reducer.js","index.js","logo.png"],"names":["GET_MESSAGES","GET_MESSAGES_SUCCESS","GET_MESSAGES_FAILURE","kwitterURL","login","loginData","dispatch","type","fetch","concat","method","headers","Content-Type","body","JSON","stringify","then","response","ok","json","err","data","success","payload","token","id","result","push","getUserInfo","catch","userId","user","getAnyUser","updateMessageById","messageId","getState","res","message","getMessageById","messageIndex","messages","findIndex","index","toggleLike","likeId","find","loggedInUser","like","likes","authentication","Authorization","addLike","Message","react_default","a","createElement","react","Card","color","animation","Icon","Inverted","vertical","width","fluid","Content","Header","this","props","text","Description","username","Divider","extra","onClick","isLiked","numOfLikes","Component","MessagesList","_Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","getMessages","_this","Grid","container","stackable","Row","Column","map","Components_Message","length","connect","state","users","objectSpread","statusText","forEach","setTimeout","console","log","Feed","Fragment","style","textAlign","Components_MessagesList","ComposeMessage","handleMessageSubmit","event","setState","target","handleComposeMessageProfileEnter","composeMessage","displayFeed","Form","display","justifyContent","TextArea","placeholder","onChange","maxLength","maxWidth","Button","padding","handleComposeMessageProfileButton","React","userID","Profile","as","Menu","Image","src","logo","Segment","inverted","Meta","displayName","about","Link","to","size","floated","basic","Components_ComposeMessage","UserMessages","verticalAlign","Login","password","handleUsernameChange","handlePasswordChange","handleLogin","height","centered","stacked","Field","label","required","control","Input","autoFocus","Group","positive","Or","loginResult","DeleteUser","modalOpen","handleOpen","handleClose","handleDeleteUser","deleteUser","Modal","trigger","name","open","onClose","icon","Actions","EditProfile","handleChange","e","_ref","defineProperty","handleSubmit","_ref2","updateUser","Subheader","Components_DeleteUser","userData","Register","handleDisplayNameChange","handleRegister","register","registerResult","registerData","history","Logout","handleLogout","logout","active","position","Item","Dimmer","page","Navbar","activeItem","handleItemClick","Container","pointing","header","marginRight","exact","Components_Logout","App","Switch","Route","path","component","NavBar","Boolean","window","location","hostname","match","initialState","loginAuthSuccess","createdAt","updatedAt","kwitterReducer","undefined","action","newMessages","slice","splice","createBrowserHistory","basename","process","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","connectRouter","applyMiddleware","routerMiddleware","thunk","ReactDOM","render","es","lib","src_Components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.3c07cd76.chunk.js","sourcesContent":["import { push } from \"connected-react-router\";\nexport const ADD_LIKE = \"ADD_LIKE\";\nexport const ADD_LIKE_SUCCESS = \"ADD_LIKE_SUCCESS\";\nexport const CREATE_MESSAGE = \"CREATE_MESSAGE\";\nexport const CREATE_MESSAGE_SUCCESS = \"CREATE_MESSAGE_SUCCESS\";\nexport const DELETE_USER = \"DELETE_USER\";\nexport const DELETE_USER_SUCCESS = \"DELETE_USER_SUCCESS\";\nexport const DELETE_USER_FAILURE = \"DELETE_USER_FAILURE\";\nexport const GET_ANY_USER = \"GET_ANY_USER\";\nexport const GET_ANY_USER_SUCCESS = \"GET_ANY_USER_SUCCESS\";\nexport const GET_ANY_USER_FAILURE = \"GET_ANY_USER_FAILURE\";\nexport const GET_MESSAGE_BY_ID = \"GET_MESSAGE_BY_ID\";\nexport const GET_MESSAGE_BY_ID_SUCCESS = \"GET_MESSAGE_BY_ID_SUCCESS\";\nexport const GET_MESSAGES = \"GET_MESSAGES\";\nexport const GET_MESSAGES_SUCCESS = \"GET_MESSAGES_SUCCESS\";\nexport const GET_MESSAGES_FAILURE = \"GET_MESSAGES_FAILURE\";\nexport const GET_USER = \"GET_USER\";\nexport const GET_USER_SUCCESS = \"GET_USER_SUCCESS\";\nexport const GET_USER_FAILURE = \"GET_USER_FAILURE\";\nexport const LIKE_MESSAGE = \"LIKE_MESSAGE\";\nexport const LOGOUT = \"LOGOUT\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const LOGOUT_FAILURE = \"LOGOUT_FAILURE\";\nexport const LOGIN = \"LOGIN\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport const REGISTER = \"REGISTER\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAILURE = \"REGISTER_FAILURE\";\nexport const REMOVE_LIKE = \"REMOVE_LIKE\";\nexport const REMOVE_LIKE_SUCCESS = \"REMOVE_LIKE_SUCCESS\";\nexport const UPDATE_MESSAGE_BY_ID_SUCCESS = \"UPDATE_MESSAGE_BY_ID_SUCCESS\";\nexport const UPDATE_MESSAGE_BY_ID_FAIL = \"UPDATE_MESSAGE_BY_ID_FAIL\";\nexport const UPDATE_USER = \"UPDATE_USER\";\nexport const UPDATE_USER_SUCCESS = \"UPDATE_USER_SUCCESS\";\nexport const UPDATE_USER_FAILURE = \"UPDATE_USER_FAILURE\";\n\nconst kwitterURL = \"https://kwitter-api.herokuapp.com\";\n\nexport const login = loginData => dispatch => {\n  dispatch({ type: LOGIN });\n  fetch(`${kwitterURL}/auth/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(loginData)\n  })\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      // right now, we dont have an api thing to catch this stuff, so doing this will send it to the catch\n      if (data.success === false) {\n        throw \"\";\n      }\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: {\n          token: data.token,\n          id: data.id\n        },\n        login: data,\n        result: \"Successful login!\"\n      });\n      dispatch(push(\"/profile\"));\n      dispatch(getUserInfo(data.id));\n    })\n    .catch(err => {\n      dispatch({\n        type: LOGIN_FAILURE,\n        result:\n          \"Failed to login. Please enter a valid username and/or password.\"\n      });\n    });\n};\n\nexport const getUserInfo = userId => dispatch => {\n  dispatch({ type: GET_USER });\n  fetch(`${kwitterURL}/users/${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: GET_USER_SUCCESS, data: data.user });\n    })\n    .catch(err => {\n      dispatch({ type: GET_USER_FAILURE, err });\n    });\n};\n\n// without default need samename in register\n// redux thunk = middleware (like express stuff where mw got reqs to go through it. here, each action goes through there(diaspatching thigng called register from reg.js and returns function (once return = inner function; redux sees it wants action obj, so inject dispatch in))); function inside function; when have action creator, it will inject dispatch for you and get registation data\n// sees value is action obj, not function, so pass dispatch value; could also just do the simple ones (returns action obj when returns obj likr the type:...), even with thunk but that isnt async\nexport const register = (registerData, history) => dispatch => {\n  // dispatch b4 fetch b/c have comp that wants to render loading spinner or something about waitingo n api req\n  dispatch({\n    type: REGISTER\n  });\n  // set method to post b/c not defautl get\n  // if cant communicate, it will throw; else it wont know when to throw or not; fetch doesnt know\n  fetch(`${kwitterURL}/auth/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(\n      // cant just send reg js stuff; need to json it\n      // typed as how api expects them\n      // make sure pass these values\n      // username,\n      // displayName,\n      // password\n      registerData\n    )\n  })\n    // hydrates body; always need for api b/c always returns json; if not, it would  be parsed diff\n    // .then(response => response.json()) // if immediately hydrate, it always assumes its correct, so ave to check\n    .then(response => {\n      // response.ok means it's in the 200 range;\n      if (!response.ok) {\n        // throw from here, it goes to catch\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json(); // this is an else basically\n    })\n    .then(data => {\n      // data looks like w/e we got for resposne in api/psotman\n      // success already has values in state\n      // no setstate cause not in comp\n      // do dispatch on success\n      dispatch({\n        type: REGISTER_SUCCESS,\n        // add on extra data,  which is reuslt back from api (which is the username and displayname that you get back)\n        register: data,\n        result: \"Successfully Registered!\" // could make a <div>{this.props.result}</div> to display; reducer might use this value to put some  update\n      });\n      dispatch(push(\"/profile\"));\n      dispatch(\n        login({\n          username: registerData.username,\n          password: registerData.password\n        })\n      ); //gets loginData w. un and p, so need it as an obj; haveing only the username and password is because thats what the rD needs\n    })\n    .catch(err => {\n      // dispatch here on fail\n      dispatch({\n        type: REGISTER_FAILURE,\n        result: `Failed to register. Please enter a unique username, and make sure all fields have 3-20 characters.`\n      });\n    });\n};\n\nexport const logout = () => dispatch => {\n  fetch(`${kwitterURL}/auth/logout`)\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: LOGOUT_SUCCESS });\n      dispatch(push(\"/\"));\n      // alert(\"Thanks for visiting KWITTER! Come back soon!\");\n    })\n    .catch(err => {\n      dispatch({ type: LOGOUT_FAILURE, err });\n    });\n};\n\nexport const deleteUser = token => dispatch => {\n  dispatch({ type: DELETE_USER });\n  fetch(`${kwitterURL}/users`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  })\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      console.log(data);\n      dispatch({ type: DELETE_USER_SUCCESS });\n      dispatch(push(\"/register\"));\n      //   window.confirm(\"Are you sure?\");\n    })\n    .catch(err => {\n      dispatch({ type: DELETE_USER_FAILURE, err });\n    });\n};\n\nexport const updateUser = userData => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  if (userData.displayName === \"\") {\n    delete userData.displayName;\n  }\n  if (userData.password === \"\") {\n    delete userData.password;\n  }\n  dispatch({ type: UPDATE_USER });\n  fetch(`${kwitterURL}/users`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(userData)\n  })\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: UPDATE_USER_SUCCESS, data: data.user });\n      dispatch(push(\"/profile\"));\n    })\n    .catch(err => {\n      dispatch({ type: UPDATE_USER_FAILURE, err });\n    });\n};\n\nexport const getAnyUser = userId => dispatch => {\n  dispatch({ type: GET_ANY_USER });\n  fetch(`${kwitterURL}/users/${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: GET_ANY_USER_SUCCESS, data: data.user });\n    })\n    .catch(err => {\n      dispatch({ type: GET_ANY_USER_FAILURE, err });\n    });\n};\n\nexport const getMessageById = messageId => dispatch => {\n  dispatch({ type: GET_MESSAGE_BY_ID });\n  return fetch(`${kwitterURL}/messages/${messageId}`)\n    .then(res => res.json())\n    .then(data => {\n      dispatch({ type: GET_MESSAGE_BY_ID_SUCCESS });\n      return data.message;\n    });\n};\n\nexport const updateMessageById = messageId => (dispatch, getState) => {\n  dispatch(getMessageById(messageId)).then(message => {\n    const messages = getState().messages;\n    const messageIndex = messages.findIndex(\n      message => message.id === messageId\n    );\n    // retrun index # or -1; if line 281 is no good\n    if (messageIndex !== -1) {\n      dispatch({\n        type: UPDATE_MESSAGE_BY_ID_SUCCESS,\n        id: messageId,\n        index: messageIndex,\n        message\n      });\n    } else {\n      dispatch({ type: UPDATE_MESSAGE_BY_ID_FAIL, id: messageId });\n    }\n  });\n};\n\nexport const composeMessage = text => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  dispatch({ type: CREATE_MESSAGE });\n  return fetch(`${kwitterURL}/messages`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ text })\n  })\n    .then(res => res.json())\n    .then(data => {\n      dispatch({\n        type: CREATE_MESSAGE_SUCCESS\n      });\n      const userId = getState().authentication.id;\n      dispatch(getUserInfo(userId));\n    });\n};\n\nexport const removeLike = likeId => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  dispatch({ type: REMOVE_LIKE });\n  return fetch(`${kwitterURL}/likes/${likeId}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: \"Bearer \" + token\n    }\n  })\n    .then(res => res.json())\n    .then(data => {\n      dispatch({\n        type: REMOVE_LIKE_SUCCESS\n      });\n    });\n};\nexport const addLike = messageId => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  dispatch({ type: ADD_LIKE });\n  return fetch(`${kwitterURL}/likes`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token\n    },\n    body: JSON.stringify({ messageId })\n  })\n    .then(res => res.json())\n    .then(data => {\n      dispatch({ type: ADD_LIKE_SUCCESS });\n    });\n};\nexport const toggleLike = messageId => (dispatch, getState) => {\n  const message = getState().messages.find(message => message.id === messageId);\n  const userId = getState().loggedInUser.id;\n\n  const like = message.likes.find(like => like.userId === userId);\n\n  if (like) {\n    dispatch(removeLike(like.id)).then(() => {\n      dispatch(updateMessageById(messageId));\n    });\n  } else {\n    dispatch(addLike(messageId)).then(() => {\n      dispatch(updateMessageById(messageId));\n    });\n  }\n};\nexport const likedMessageSuccess = likeObj => {\n  return {\n    type: LIKE_MESSAGE,\n    payload: likeObj\n  };\n};\nexport const likeMessage = (userId, messageId, token) => dispatch => {\n  const header = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer ${token}\"\n    },\n    body: JSON.stringify({\n      userId: userId,\n      messageId: messageId\n    })\n  };\n  return fetch(`${kwitterURL}/messages`, header)\n    .then(response => response.json())\n    .then(likeObj => {\n      dispatch(likedMessageSuccess(likeObj));\n      return likeObj.like.id;\n    });\n};\n\nexport function getMessages() {\n  return function(dispatch, getState) {\n    dispatch({ type: GET_MESSAGES });\n    fetch(`${kwitterURL}/messages`)\n      .then(res => {\n        if (res.statusText === \"OK\") {\n          return res.json(); // htis is  async; it runs once everyhitng is out of  queue\n        }\n      })\n      .then(data => {\n        dispatch({\n          type: GET_MESSAGES_SUCCESS,\n          payload: {\n            messages: data.messages\n          }\n        });\n        data.messages.forEach(message => {\n          if(getState().users[message.userId]) {\n            return null\n          } else {\n            dispatch(getAnyUser(message.userId))\n          }\n        });\n        setTimeout(() => dispatch(getMessages()), 5000); // wrap dispatch\n      })\n      .catch(err => {\n        console.log(err);\n        dispatch({ type: GET_MESSAGES_FAILURE });\n      });\n  };\n}\n","import React, { Component, Fragment } from \"react\";\nimport { Divider, Card } from \"semantic-ui-react\";\n\nclass Message extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Card\n          color=\"green\"\n          animation=\"overlay\"\n          Icon=\"labeled\"\n          Inverted\n          vertical\n          width=\"thin\"\n          fluid\n        >\n          <Card.Content>\n            <Card.Header>{this.props.text}</Card.Header>\n            {/* //   place props in styling, from fragment section. */}\n            <Card.Description>\n              Kweeted by {this.props.username}\n            </Card.Description>\n            <Divider />\n            <Card.Content extra>\n              <button onClick={this.props.toggleLike}>\n                {this.props.isLiked ? \"Unlike\" : \"Like\"}\n              </button>\n              <p>Likes: {this.props.numOfLikes}</p>\n            </Card.Content>\n          </Card.Content>\n        </Card>\n      </Fragment>\n    );\n  }\n}\nexport default Message;\n","import React, { Component } from \"react\";\nimport { getMessages, toggleLike } from \"../Actions/actions\";\nimport { connect } from \"react-redux\";\nimport Message from \"./Message\";\nimport { Grid } from \"semantic-ui-react\";\n\nexport class MessagesList extends Component {\n  componentDidMount() {\n    this.props.getMessages();\n  }\n\n  // formatKweetDate = date => {\n  //   const months = [\n  //     \"Jan\",\n  //     \"Feb\",\n  //     \"Mar\",\n  //     \"Apr\",\n  //     \"May\",\n  //     \"Jun\",\n  //     \"Jul\",\n  //     \"Aug\",\n  //     \"Sept\",\n  //     \"Oct\",\n  //     \"Nov\",\n  //     \"Dec\"\n  //   ];\n  //   const zeros = [\"00\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\"];\n\n  //   let dateObject = new Date(date);\n  //   let month = dateObject.getUTCMonth();\n  //   let day = dateObject.getUTCDate();\n  //   let year = dateObject.getUTCFullYear();\n  //   let hours = dateObject.getHours();\n\n  //   let ending = \"AM\";\n  //   if (hours === 0) {\n  //     hours = 12;\n  //   } else if (hours < 10) {\n  //     hours = zeros[hours];\n  //   } else if (hours === 12) {\n  //     ending = \"PM\";\n  //   } else if (hours > 12) {\n  //     hours = hours - 12;\n  //     ending = \"PM\";\n  //   }\n  //   let minutes = dateObject.getMinutes();\n  //   if (minutes < 10) {\n  //     minutes = zeros[minutes];\n  //   }\n  //   let seconds = dateObject.getSeconds();\n  //   if (seconds < 10) {\n  //     seconds = zeros[seconds];\n  //   }\n  //   return \"${months[month]} ${day}, ${year} at ${hours}:${minutes}:${seconds} ${ending}\";\n  // };\n\n  render() {\n    return (\n      <Grid container stackable>\n        <Grid.Row>\n          <Grid.Column>\n            {this.props.messages.map(message => (\n              <Message\n                key={message.id}\n                text={message.text}\n                username={message.username}\n                toggleLike={() => this.props.toggleLike(message.id)}\n                numOfLikes={message.likes.length}\n                isLiked={message.isLiked}\n              />\n            ))}\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    messages: state.messages.map(message => {\n      const username =\n        (state.users[message.userId] && state.users[message.userId].username) ||\n        \"unknown\";\n      const like = message.likes.find(\n        like => like.userId === state.authentication.id\n      );\n      if (like) {\n        return {\n          ...message,\n          username,\n          isLiked: true\n        };\n      } else {\n        return {\n          ...message,\n          username,\n          isLiked: false\n        };\n      }\n    })\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getMessages: () => {\n      dispatch(getMessages());\n    },\n    toggleLike: messageId => dispatch(toggleLike(messageId))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MessagesList);\n\n// possible logic to add from jsx file, this would allow us to filter users and return their messages.\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     findUsers: (limit, offset) => {\n//       dispatch(findUsers(limit, offset));\n//     },\n//     findSingleUser: userID => {\n//       dispatch(findSingleUser(userID));\n//     },\n//     getMessages: () => {\n//       dispatch(getMessages());\n//     }\n//   };\n// };\n","import React, { Component } from \"react\";\nimport MessagesList from \"./MessagesList\";\n\nclass Feed extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <h1 style={{ textAlign: \"center\" }}>Feed</h1>\n        <MessagesList />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Feed;\n","import React, { Fragment } from \"react\";\nimport { Button, Form, TextArea } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { composeMessage } from \"../Actions/actions\";\n\nclass ComposeMessage extends React.Component {\n  state = {\n    text: \"\"\n  };\n\n  handleMessageSubmit = event => {\n    this.setState({ text: event.target.value });\n  };\n\n  handleComposeMessageProfileEnter = event => {\n    if (event.key === \"Enter\") {\n      this.props.composeMessage(this.state.text);\n      this.setState({ text: \"\" });\n    }\n  };\n\n  // handleComposeMessageProfileButton = event => {\n  //   this.props.composeMessage(this.state.text);\n  //   this.setState({ text: \"\" });\n  // };\n\n  displayFeed = () => {\n    return (\n      <Form\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\"\n        }}\n      >\n        <TextArea\n          placeholder=\"What would you like to Kweet about today?\"\n          onChange={this.handleMessageSubmit}\n          value={this.state.text}\n          // onKeyPress={this.handleComposeMessageProfileEnter}\n          maxLength=\"255\"\n          style={{ maxWidth: \"36em\" }}\n        />\n        <Button\n          style={{\n            color: \"rgb(45,45,45)\",\n            padding: \"5px\"\n          }}\n          onClick={this.handleComposeMessageProfileButton}\n        >\n          Kweet\n        </Button>\n      </Form>\n    );\n  };\n\n  render() {\n    return <Fragment>{this.displayFeed()}</Fragment>;\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userID: state.userID\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    composeMessage: text => {\n      dispatch(composeMessage(text));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ComposeMessage);\n","import { MessagesList } from \"./MessagesList\";\nimport { getMessages, toggleLike } from \"../Actions/actions\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = state => {\n  return {\n    messages: state.loggedInUser.messages.map(message => {\n      const username = state.loggedInUser.username;\n      const like = message.likes.find(\n        like => like.userId === state.authentication.id\n      );\n      if (like) {\n        return {\n          ...message,\n          username,\n          isLiked: true\n        };\n      } else {\n        return {\n          ...message,\n          username,\n          isLiked: false\n        };\n      }\n    })\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getMessages: () => {\n      // dispatch(getMessages());\n    },\n    toggleLike: messageId => dispatch(toggleLike(messageId))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MessagesList);\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Card,\n  Divider,\n  Grid,\n  Header,\n  Image,\n  Menu,\n  Segment\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport logo from \"../logo.png\";\nimport { connect } from \"react-redux\";\nimport ComposeMessage from \"./ComposeMessage\";\nimport UserMessages from \"./UserMessages\";\n\nclass Profile extends Component {\n  render() {\n    return (\n      <Grid container stackable>\n        <Grid.Row>\n          <Grid.Column width={6}>\n            <Card\n              color=\"green\"\n              as={Menu}\n              animation=\"overlay\"\n              Icon=\"labeled\"\n              Inverted\n              vertical\n              width=\"thin\"\n              fluid\n            >\n              <Card.Content>\n                <Image src={logo} />\n                <Segment style={{ padding: \"1em 0em\" }} inverted color=\"green\">\n                  <Card.Header as=\"h2\" textAlign=\"center\">\n                    {this.props.username}\n                  </Card.Header>\n                </Segment>\n                <Card.Description>\n                  <Card.Meta as=\"h2\">Display Name:</Card.Meta>\n                  {this.props.displayName}\n                </Card.Description>\n                <Divider />\n                <Card.Description>\n                  <Card.Meta as=\"h2\">About Me:</Card.Meta>\n                  {this.props.about}\n                </Card.Description>\n              </Card.Content>\n              <Card.Content extra>\n                <Link to=\"/editprofile\">\n                  <Button size=\"large\" color=\"black\" fluid>\n                    Edit Profile\n                  </Button>\n                </Link>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n          <Grid.Column floated=\"right\" width={10}>\n            <Segment basic>\n              <Header as=\"h1\" textAlign=\"center\">\n                My Messages\n              </Header>\n              <ComposeMessage />\n              <Divider/>\n              <UserMessages />\n            </Segment>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n\nconst profilePicture = () => (\n  <div>\n    <Image size=\"tiny\" verticalAlign=\"top\" /> <span>Top Aligned</span>\n    <Divider />\n  </div>\n);\n\nconst mapStateToProps = state => {\n  return {\n    displayName: state.loggedInUser.displayName,\n    about: state.loggedInUser.about,\n    username: state.loggedInUser.username\n  };\n};\nexport default connect(\n  mapStateToProps,\n  profilePicture\n)(Profile);\n","import React, { Component } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../Actions/actions.js\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Image,\n  Input,\n  Segment\n} from \"semantic-ui-react\";\nimport logo from \"../logo.png\";\n\nclass Login extends Component {\n  state = {\n    username: \"\",\n    password: \"\"\n  };\n\n  handleUsernameChange = event => {\n    this.setState({\n      username: event.target.value\n    });\n  };\n  handlePasswordChange = event => {\n    this.setState({\n      password: event.target.value\n    });\n  };\n  handleLogin = event => {\n    this.props.login({\n      username: this.state.username,\n      password: this.state.password\n    });\n  };\n\n  render() {\n    return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: \"100%\" }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <div />\n          <Header as=\"h1\" color=\"black\" textAlign=\"center\">\n            Welcome to Kwitter!\n          </Header>\n          <Image src={logo} size=\"medium\" centered />\n          <Header as=\"h2\" color=\"grey\" textAlign=\"center\">\n            Login\n          </Header>\n          <Form size=\"large\">\n            <Segment stacked color=\"grey\">\n              <Form.Field\n                label=\"Username:\"\n                required\n                placeholder=\"Username\"\n                type=\"text\"\n                control={Input}\n                autoFocus\n                onChange={this.handleUsernameChange}\n              />\n              <Form.Field\n                label=\"Password:\"\n                required\n                placeholder=\"Password\"\n                type=\"password\"\n                control={Input}\n                onChange={this.handlePasswordChange}\n              />\n              <Button.Group>\n                {/* redirect */}\n                {/* connected react router */}\n                <Button\n                  onClick={this.handleLogin}\n                  positive\n                  size=\"large\"\n                  to=\"/profile\"\n                >\n                  Login to Your Account!\n                </Button>\n                <Button.Or />\n                <Link to=\"/register\">\n                  <Button size=\"large\" color=\"brown\">\n                    Don't Have an Account? Register Here!\n                  </Button>\n                </Link>\n              </Button.Group>\n              <div>{this.props.result}</div>\n            </Segment>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    result: state.loginResult\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    login: loginData => dispatch(login(loginData))\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Login);\n","import React, { Component } from \"react\";\nimport { deleteUser } from \"../Actions/actions\";\nimport { connect } from \"react-redux\";\nimport { Button, Divider, Header, Icon, Modal } from \"semantic-ui-react\";\n\nclass DeleteUser extends Component {\n  state = { modalOpen: false };\n\n  handleOpen = () => this.setState({ modalOpen: true });\n  handleClose = () => this.setState({ modalOpen: false });\n  handleDeleteUser = event => {\n    this.props.deleteUser(this.props.token);\n    this.setState({ modalOpen: false });\n  };\n\n  render() {\n    return (\n      <Modal\n        trigger={\n          <Button onClick={this.handleOpen} color=\"red\">\n            <Icon name=\"trash alternate outline\" />\n            Delete User\n          </Button>\n        }\n        open={this.state.modalOpen}\n        onClose={this.handleClose}\n        size=\"tiny\"\n      >\n        <Header\n          textAlign=\"center\"\n          verticalAlign=\"middle\"\n          icon=\"trash alternate outline\"\n          as=\"h1\"\n        >\n          Do you want to delete your account?\n          <Divider />\n          <Modal.Actions>\n            <Button.Group>\n              <Button color=\"green\" onClick={this.handleDeleteUser}>\n                <Icon name=\"checkmark\" /> Indeed!\n              </Button>\n              <Button.Or />\n              <Button color=\"red\" onClick={this.handleClose}>\n                <Icon name=\"remove\" /> Nope!\n              </Button>\n            </Button.Group>\n          </Modal.Actions>\n        </Header>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.authentication.token\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteUser: token => dispatch(deleteUser(token))\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DeleteUser);\n","import React, { Component } from \"react\";\nimport {\n  Form,\n  Grid,\n  Header,\n  Icon,\n  Segment\n} from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { updateUser } from \"../Actions/actions.js\";\nimport DeleteUser from \"./DeleteUser\";\n\nclass EditProfile extends Component {\n  state = { displayName: \"\", password: \"\", about: \"\" };\n\n  handleChange = (e, { value }) => this.setState({ [e.target.name]: value });\n  handleSubmit = (e, { value }) => {\n    this.props.updateUser({ ...this.state });\n  };\n\n  render() {\n    return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: \"100%\" }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 600 }}>\n          <Header as=\"h2\" color=\"brown\" icon>\n            <Icon name=\"settings\" />\n            Edit your profile!\n            <Header.Subheader>\n              Change your display name and password, and update all the\n              wonderful facts about you!\n            </Header.Subheader>\n          </Header>\n          <Form size=\"large\">\n            <Segment stacked color=\"grey\">\n              <Form.Input\n                onChange={this.handleChange}\n                name=\"displayName\"\n                fluid\n                label=\"Display Name\"\n                placeholder=\"Display Name\"\n              />\n              <Form.Input\n                onChange={this.handleChange}\n                name=\"password\"\n                fluid\n                label=\"Password\"\n                placeholder=\"Password\"\n              />\n              <Form.TextArea\n                onChange={this.handleChange}\n                name=\"about\"\n                label=\"About\"\n                placeholder=\"Tell us more about you...\"\n              />\n\n              <Form.Button color=\"green\" onClick={this.handleSubmit}>\n                <Icon name=\"checkmark\" /> Confirm Changes\n              </Form.Button>\n              <DeleteUser />\n            </Segment>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateUser: userData => dispatch(updateUser(userData))\n  };\n};\nconst mapStateToProps = state => {\n  return {\n    token: state.authentication.token\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(EditProfile);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { register } from \"../Actions/actions.js\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Image,\n  Input,\n  Segment\n} from \"semantic-ui-react\";\nimport logo from \"../logo.png\";\n\nclass Register extends Component {\n  state = {\n    username: \"\",\n    displayName: \"\",\n    password: \"\"\n    // result: \"\" // say if failed or success; dont need b/c inside action\n  };\n\n  // function will go on dom, so need to bind correctly\n  handleUsernameChange = event => {\n    this.setState({\n      username: event.target.value\n    });\n  };\n  handleDisplayNameChange = event => {\n    this.setState({\n      displayName: event.target.value\n    });\n  };\n  handlePasswordChange = event => {\n    this.setState({\n      password: event.target.value\n    });\n  };\n  // if has same username, api will send an error; get list of all usernames and check forrepeats and do onBlur (when exiting that inout box; might need another endpoint to send username)\n  // need to think about success and error cases\n  // the fetch will have to be in redux when get there\n  // register would be connected through action creator b/c the event isnt being used in handler, so this code doesnt have to be connected inside this comp and can move in avtion creator\n  handleRegister = event => {\n    // translate state value to get this then put elsewhere\n    this.props.register({\n      username: this.state.username,\n      displayName: this.state.displayName,\n      password: this.state.password\n    });\n  };\n\n  render() {\n    return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: \"100%\" }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <div />\n          <Header as=\"h1\" color=\"black\" textAlign=\"center\">\n            Welcome to Kwitter!\n          </Header>\n          <Image src={logo} size=\"small\" centered />\n          <Header as=\"h2\" color=\"grey\" textAlign=\"center\">\n            Register a New Account\n          </Header>\n          <Form size=\"large\">\n            <Segment stacked color=\"grey\">\n              <Form.Field label=\"ALL FIELDS MUST HAVE 3-20 CHARACTERS\" />\n              {/* make sure to add the onchanges otherwise value wont work; record value whenever changes nad display vlaue when rerenders */}\n              {/* required means it has to have something in it */}\n              {/* value is making things customized/changing thinhs in state; without, dom controls how value is displayed */}\n              <Form.Field\n                label=\"Username:\"\n                required\n                placeholder=\"Username\"\n                type=\"text\"\n                control={Input}\n                autoFocus\n                onChange={this.handleUsernameChange}\n              />\n              <Form.Field\n                label=\"Display Name:\"\n                required\n                placeholder=\"Display Name\"\n                type=\"text\"\n                control={Input}\n                onChange={this.handleDisplayNameChange}\n              />\n              <Form.Field\n                label=\"Password:\"\n                required\n                placeholder=\"Password\"\n                type=\"password\"\n                control={Input}\n                onChange={this.handlePasswordChange}\n              />\n              <Button.Group>\n                <Button positive size=\"large\" onClick={this.handleRegister}>\n                  Create Your New Account!\n                </Button>\n                <Button.Or />\n                <Link to=\"/\">\n                  <Button size=\"large\" color=\"brown\">\n                    Already Have an Account? Login Here!\n                  </Button>\n                </Link>\n              </Button.Group>\n              <div>{this.props.result}</div>\n            </Segment>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\n// listne to state value to rerender whne changes\nconst mapStateToProps = state => {\n  return {\n    result: state.registerResult\n  };\n};\n// thing get in is dispatch and reutnr props\nconst mapDispatchToProps = dispatch => {\n  return {\n    // neesd all state stuff to create action thing\n    // register: (username, displayName, password) => dispatch(register(username, displayName, password))\n    register: registerData => dispatch(register(registerData))\n  };\n};\n// export default Register;\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Register);\n\n// confirm password by being exactly the same?\n","import React, { Component } from \"react\";\nimport { Button, Dimmer, Divider, Header, Icon, Menu } from \"semantic-ui-react\";\nimport { logout } from \"../Actions/actions\";\nimport { connect } from \"react-redux\";\n\nclass Logout extends Component {\n  state = {};\n\n  handleLogout = event => {\n    this.props.logout();\n    this.setState({ active: false });\n  };\n\n  handleOpen = () => this.setState({ active: true });\n\n  render() {\n    const { active } = this.state;\n    return (\n      <Menu.Menu position=\"right\">\n        <Menu.Item name=\"logout\" onClick={this.handleOpen} />\n        <Dimmer active={active} page>\n          <Header as=\"h2\" icon inverted>\n            <Icon name=\"heart\" />\n            <Menu.Item>Thanks for visiting KWITTER! Come back soon!</Menu.Item>\n            <Divider />\n            <Button\n              name=\"logout\"\n              onClick={this.handleLogout}\n              size=\"massive\"\n              color=\"yellow\"\n            >\n              GOODBYE!!!\n            </Button>\n          </Header>\n        </Dimmer>\n      </Menu.Menu>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    logout: () => dispatch(logout())\n  };\n};\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Logout);\n","import React, { Component } from \"react\";\nimport Logout from \"./Logout\";\nimport { Container, Image, Menu } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport logo from \"../logo.png\";\n\nexport default class Navbar extends Component {\n  state = { activeItem: \"profile\" };\n\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name });\n\n  render() {\n    const { activeItem } = this.state;\n\n    return (\n      <Container>\n        <Menu pointing color=\"green\" inverted>\n          <Menu.Item header inverted>\n            <Image size=\"mini\" src={logo} style={{ marginRight: \"1.5em\" }} />\n            Kwitter\n          </Menu.Item>\n          <Menu.Item\n            as={Link}\n            name=\"feed\"\n            active={activeItem === \"feed\"}\n            onClick={this.handleItemClick}\n            exact\n            to=\"/feed\"\n          />\n          <Menu.Item\n            name=\"profile\"\n            as={Link}\n            active={activeItem === \"profile\"}\n            onClick={this.handleItemClick}\n            exact\n            to=\"/profile\"\n          />\n          {/* <DeleteUser /> */}\n          <Menu.Menu position=\"right\">\n            <Logout />\n          </Menu.Menu>\n        </Menu>\n        <div />\n      </Container>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Feed from \"./Feed\";\nimport Profile from \"./Profile\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport EditProfile from \"./EditProfile\";\nimport Register from \"./Register\";\nimport NavBar from \"./NavBar\";\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Switch>\n          {/* this is saying that on these paths, no compoennt/no navbar; the * means evrything else shwos navbar */}\n          <Route exact path=\"/editprofile\" component={NavBar} />\n          <Route exact path=\"/feed\" component={NavBar} />\n          <Route exact path=\"/profile\" component={NavBar} />\n          <Route exact path=\"/\" component={null} />\n          <Route exact path=\"/register\" component={null} />\n          {/* <Route exact path=\"*\" component={null} /> */}\n        </Switch>\n        {/* <MessagesList /> */}\n        <Switch>\n          <Route exact path=\"/feed\" component={Feed} />\n          <Route exact path=\"/profile\" component={Profile} />\n          <Route exact path=\"/register\" component={Register} />\n          <Route exact path=\"/editprofile\" component={EditProfile} />\n          <Route exact path=\"/\" component={Login} />\n          {/* <Route exact path=\"*\" component={NullPath} /> */}\n        </Switch>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  DELETE_USER,\n  DELETE_USER_SUCCESS,\n  DELETE_USER_FAILURE,\n  GET_ANY_USER,\n  GET_ANY_USER_SUCCESS,\n  GET_ANY_USER_FAILURE,\n  GET_MESSAGES,\n  GET_MESSAGES_SUCCESS,\n  GET_MESSAGES_FAILURE,\n  GET_USER,\n  GET_USER_SUCCESS,\n  GET_USER_FAILURE,\n  LOGIN,\n  LOGIN_SUCCESS,\n  LOGIN_FAILURE,\n  LOGOUT,\n  LOGOUT_SUCCESS,\n  LOGOUT_FAILURE,\n  REGISTER,\n  REGISTER_SUCCESS,\n  REGISTER_FAILURE,\n  UPDATE_USER,\n  UPDATE_USER_SUCCESS,\n  UPDATE_USER_FAILURE,\n  UPDATE_MESSAGE_BY_ID_SUCCESS\n} from \"../Actions/actions\";\n\nconst initialState = {\n  authentication: {\n    loginAuthSuccess: false,\n    token: null,\n    id: \"\"\n  },\n  loggedInUser: {\n    id: 0,\n    username: \"\",\n    displayName: \"\",\n    about: \"\",\n    createdAt: \"\",\n    updatedAt: \"\",\n    messages: []\n  },\n  // logoutUser: {\n  //   succes:\n  // }\n  login: {},\n  loginResult: \"\",\n  messages: [],\n  // if succes, it only reutnr usernme and dispalyname; result gets dumped into redux\n  register: {},\n  registerResult: \"\", // result is string, so default that\n  userId: null,\n  users: {}\n};\n\nconst kwitterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case DELETE_USER:\n      return state;\n    case DELETE_USER_FAILURE:\n      return state;\n    case DELETE_USER_SUCCESS:\n      // do a slice and filter of based on the id or something based on all users?\n      return {\n        ...state,\n        initialState\n      };\n    case GET_ANY_USER:\n      return state;\n    case GET_ANY_USER_SUCCESS:\n      return {\n        ...state,\n        users: { ...state.users, [action.data.id]: action.data }\n      };\n    case GET_ANY_USER_FAILURE:\n      return state;\n    case GET_MESSAGES:\n      return state;\n    case GET_MESSAGES_FAILURE:\n      return state;\n    case GET_MESSAGES_SUCCESS:\n      return {\n        ...state,\n        messages: action.payload.messages\n      };\n    case GET_USER:\n      return state;\n    case GET_USER_SUCCESS:\n      return {\n        ...state,\n        loggedInUser: action.data\n      };\n    case GET_USER_FAILURE:\n      return state;\n    case LOGIN:\n      return state;\n    case LOGIN_FAILURE:\n      return {\n        ...state,\n        authentication: {\n          loginAuthSuccess: false\n        },\n        loginResult: action.result\n      };\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        authentication: {\n          loginAuthSuccess: true,\n          token: action.payload.token,\n          id: action.payload.id\n        },\n        login: action.login,\n        loginResult: action.result\n      };\n    case LOGOUT:\n      return state;\n    case LOGOUT_SUCCESS:\n      return {\n        ...state,\n        loggedInUser: initialState.loggedInUser,\n        authentication: initialState.authentication\n      };\n    case LOGOUT_FAILURE:\n      return state;\n    case REGISTER:\n      return state; // if not modifying anything, you can just do something like default to return all stuff; can do to get reducer started and can see all  tings being fired in the redux addont hing\n    case REGISTER_FAILURE:\n      return {\n        // state // placeholder for now; if want to do like\n        ...state,\n        registerResult: action.result\n      };\n    case REGISTER_SUCCESS:\n      return {\n        ...state,\n        register: action.register,\n        registerResult: action.result\n      };\n    case UPDATE_MESSAGE_BY_ID_SUCCESS:\n      const newMessages = state.messages.slice();\n      newMessages.splice(action.index, 1, action.message);\n      return {\n        ...state,\n        messages: newMessages\n      };\n    case UPDATE_USER:\n      return state;\n    case UPDATE_USER_SUCCESS:\n      return {\n        ...state,\n        loggedInUser: { ...state.loggedInUser, ...action.data }\n      };\n    case UPDATE_USER_FAILURE:\n      return state;\n    // always need to return somehtign; could combine all of the cases with just the return state, but it doesnt waste that much time to not have it\n    default:\n      return state;\n  }\n};\n\nexport default kwitterReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ConnectedRouter,\n  routerMiddleware,\n  connectRouter\n} from \"connected-react-router\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// redux thunk is middleware but need to specify on redux\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\nimport kwitterReducer from \"./Reducers/reducer\";\nimport { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory({basename: process.env.PUBLIC_URL});\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  connectRouter(history)(kwitterReducer),\n  composeEnhancers(applyMiddleware(routerMiddleware(history), thunk))\n);\n\nconst Index = () => (\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>\n);\n\nReactDOM.render(<Index />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.6d51e776.png\";"],"sourceRoot":""}